title = "COVID-19: Total Cases vs. Total Deaths by Continent",
x = "Total Cases",
y = "Total Deaths",
color = "Continent"
) +
theme_minimal()
library(ggplot2)
df <- read.csv("Desktop/worldometer_data.csv", header=TRUE)
ggplot(df, aes(x = TotalCases, y = TotalDeaths, color = Continent)) +
geom_point(size = 1, alpha = 0.7) +
labs(
title = "COVID-19: Total Cases vs. Total Deaths by Continent",
x = "Total Cases",
y = "Total Deaths",
color = "Continent"
) +
theme_minimal()
library(ggplot2)
df <- read.csv("Desktop/worldometer_data.csv", header=TRUE)
df$Continent[is.na(df$Continent)] <- "N/A"
ggplot(df, aes(x = TotalCases, y = TotalDeaths, color = Continent)) +
geom_point(size = 1, alpha = 0.7) +
labs(
title = "COVID-19: Total Cases vs. Total Deaths by Continent",
x = "Total Cases",
y = "Total Deaths",
color = "Continent"
) +
theme_minimal()
library(ggplot2)
df <- read.csv("Desktop/worldometer_data.csv", header=TRUE)
df$Continent[is.na(df$Continent)] <- "N/A"
ggplot(df, aes(x = TotalCases, y = TotalDeaths, color = Continent)) +
geom_point(size = 1, alpha = 0.7) +
labs(
title = "COVID-19: Total Cases vs. Total Deaths by Continent",
x = "Total Cases",
y = "Total Deaths",
color = "Continent"
) +
theme_minimal()
library(ggplot2)
df <- read.csv("Desktop/worldometer_data.csv", header=TRUE)
df$Continent[is.na(df$Continent)] <- "N/A"
df$Continent[df$Continent == ""] <- "N/A"
ggplot(df, aes(x = TotalCases, y = TotalDeaths, color = Continent)) +
geom_point(size = 1, alpha = 0.7) +
labs(
title = "COVID-19: Total Cases vs. Total Deaths by Continent",
x = "Total Cases",
y = "Total Deaths",
color = "Continent"
) +
theme_minimal()
library(ggplot2)
df <- read.csv("Desktop/worldometer_data.csv", header=TRUE)
df$Continent[is.na(df$Continent)] <- "N/A"
df$Continent[df$Continent == ""] <- "N/A"
ggplot(df, aes(x = TotalCases, y = TotalDeaths, color = Continent)) +
geom_point(size = 1, alpha = 0.7) +
labs(
title = "Total Cases vs. Total Deaths",
x = "Total Cases",
y = "Total Deaths",
color = "Continent"
) +
theme_minimal()
library(ggplot2)
df <- read.csv("Desktop/worldometer_data.csv", header=TRUE)
continent_order <- c("Africa", "Asia", "Australia/Oceania", "Europe",
"North America", "South America", "N/A")
df$Continent[df$Continent == ""] <- "N/A"
df$Continent <- factor(df$Continent, levels = continent_order)
ggplot(df, aes(x = TotalCases, y = TotalDeaths, color = Continent)) +
geom_point(size = 1, alpha = 0.7) +
labs(
title = "Total Cases vs. Total Deaths",
x = "Total Cases",
y = "Total Deaths",
color = "Continent"
) +
theme_minimal()
ggplot(df, aes(x = TotalCases, y = TotalDeaths, color = Continent)) +
geom_point(size = 3, alpha = 0.7) +
scale_x_log10() +
scale_y_log10() +
labs(
title = "COVID-19: Total Cases vs. Total Deaths (Log-Log) by Continent",
x = "Total Cases (log scale)",
y = "Total Deaths (log scale)",
color = "Continent"
) +
theme_minimal()
ggplot(df, aes(x = TotalCases, y = TotalDeaths, color = Continent)) +
geom_point(size = 1, alpha = 0.7) +
scale_x_log10() +
scale_y_log10() +
labs(
title = "COVID-19: Total Cases vs. Total Deaths (Log-Log) by Continent",
x = "Total Cases (log scale)",
y = "Total Deaths (log scale)",
color = "Continent"
) +
theme_minimal()
library(ggwaffle)
install.packages("waffle")
library(ggwaffle)
install.packages("ggwaffle")
library(ggwaffle)
library(waffle)
# Example of creating a waffle chart for COVID data
waffle_data <- df %>%
dplyr::select(Continent, TotalCases) %>%
dplyr::group_by(Continent) %>%
dplyr::summarize(TotalCases = sum(TotalCases)) %>%
dplyr::mutate(TotalCases = round(TotalCases / 100000))  # scale for visual clarity
library(waffle)
library(dplyr)
# Summarize TotalCases by Continent
waffle_data <- df %>%
dplyr::select(Continent, TotalCases) %>%
dplyr::group_by(Continent) %>%
dplyr::summarize(TotalCases = sum(TotalCases)) %>%
dplyr::mutate(TotalCases = round(TotalCases / 100000))  # Scaling for better visualization
# Create waffle chart
waffle(waffle_data$TotalCases,
rows = 10,
colors = c("blue", "green", "red", "orange", "purple", "pink", "grey"),
title = "Total COVID Cases by Continent")
library(waffle)
library(dplyr)
# Summarize TotalCases by Continent
waffle_data <- df %>%
dplyr::select(Continent, TotalCases) %>%
dplyr::group_by(Continent) %>%
dplyr::summarize(TotalCases = sum(TotalCases)) %>%
dplyr::mutate(TotalCases = round(TotalCases / 1000))  # Scaling for better visualization
# Create waffle chart
waffle(waffle_data$TotalCases,
rows = 10,
colors = c("blue", "green", "red", "orange", "purple", "pink", "grey"),
title = "Total COVID Cases by Continent")
library(waffle)
library(dplyr)
# Summarize TotalCases by Continent
waffle_data <- df %>%
dplyr::select(Continent, TotalCases) %>%
dplyr::group_by(Continent) %>%
dplyr::summarize(TotalCases = sum(TotalCases)) %>%
dplyr::mutate(TotalCases = round(TotalCases / 100000))  # Scaling for better visualization
# Create waffle chart
waffle(waffle_data$TotalCases,
rows = 10,
colors = c("blue", "green", "red", "orange", "purple", "pink", "grey"),
title = "Total COVID Cases by Continent")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
df <- read.csv("Desktop/worldometer_data.csv", header=TRUE)
continent_order <- c("Africa", "Asia", "Australia/Oceania", "Europe",
"North America", "South America", "N/A")
df$Continent[df$Continent == ""] <- "N/A"
df$Continent <- factor(df$Continent, levels = continent_order)
ggplot(df, aes(x = TotalCases, y = TotalDeaths, color = Continent)) +
geom_point(size = 1, alpha = 0.7) +
labs(
title = "Total Cases vs. Total Deaths",
x = "Total Cases",
y = "Total Deaths",
color = "Continent"
) +
theme_minimal()
library(ggplot2)
library(tidyverse)
worldometer_data <- read_csv("Desktop/worldometer_data.csv")
library(ggwaffle)
before <- ggplot(data = worldometer_data, mapping = aes(x = TotalCases, y = TotalDeaths, color = Continent)) + geom_point() +
labs(x = "TotalCases", y = "TotalDeaths", title = "TotalCases vs. TotalDeaths", fill = "Continent")
before
install.packages("ggwaffle")
library(ggwaffle)
install.packages("remotes")
remotes::install_github("hrbrmstr/ggwaffle")
install.packages("waffle")
library(waffle)
library(waffle)
library(ggplot2)
library(tidyverse)
worldometer_data <- read_csv("Desktop/worldometer_data.csv")
library(waffle)
library(waffle)
before <- ggplot(data = worldometer_data, mapping = aes(x = TotalCases, y = TotalDeaths, color = Continent)) + geom_point() +
labs(x = "TotalCases", y = "TotalDeaths", title = "TotalCases vs. TotalDeaths", fill = "Continent")
before
after <- ggplot(data = worldometer_data, mapping = aes(x = log(TotalCases), y = log(TotalDeaths), color = Continent)) + geom_point() +
labs(x = "TotalCases", y = "TotalDeaths", title = "TotalCases vs. TotalDeaths", fill = "Continent")
after
waffle_data <- waffle_iron(worldometer_data, aes_d(group = Continent))
waffle_data <- worldometer_data %>%
group_by(Continent) %>%
summarise(total_cases = sum(TotalCases, na.rm = TRUE)) %>%
ungroup()
# Convert the data into a format suitable for waffle (percentage of total cases per continent)
waffle_data <- waffle_data %>%
mutate(percentage = total_cases / sum(total_cases) * 100)
# Create the waffle chart
waffle(waffle_data$percentage,
rows = 10,
colors = "Set3",
title = "Worldometer by Continent")
library(ggwaffle)
before <- ggplot(data = worldometer_data, mapping = aes(x = TotalCases, y = TotalDeaths, color = Continent)) + geom_point() +
labs(x = "TotalCases", y = "TotalDeaths", title = "TotalCases vs. TotalDeaths", fill = "Continent")
before
library(ggwaffle)
library(ggwaffle)
install.packages("ggwaffle")
library(ggwaffle)
# First, install remotes if not already installed
install.packages("remotes")
# Then install ggwaffle from GitHub
remotes::install_github("hrbrmstr/ggwaffle")
# First, install remotes if not already installed
install.packages("remotes")
remotes::install_github("hrbrmstr/ggwaffle")
devtools::install_github("liamgilbey/ggwaffle")
library(ggwaffle)
before <- ggplot(data = worldometer_data, mapping = aes(x = TotalCases, y = TotalDeaths, color = Continent)) + geom_point() +
labs(x = "TotalCases", y = "TotalDeaths", title = "TotalCases vs. TotalDeaths", fill = "Continent")
before
library(ggplot2)
library(tidyverse)
worldometer_data <- read_csv("Desktop/worldometer_data.csv")
library(ggplot2)
library(tidyverse)
worldometer_data <- read_csv("worldometer_data.csv")
library(ggplot2)
library(tidyverse)
worldometer_data <- read_csv("worldometer_data.csv")
install.packages("cli", type = "source")
library(ggplot2)
library(tidyverse)
worldometer_data <- read_csv("worldometer_data.csv")
install.packages("cli", type = "source")
library(ggplot2)
library(tidyverse)
worldometer_data <- read_csv("worldometer_data.csv")
install.packages("cli")
library(ggplot2)
library(tidyverse)
worldometer_data <- read_csv("worldometer_data.csv")
devtools::install_github("liamgilbey/ggwaffle")
library(ggwaffle)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
library(tidyverse)
library(readxl)
library(scales)
library(janitor)
nurses <- read_csv("Desktop/nurses.csv") |> clean_names()
# Subset to three states
nurses_subset <- nurses |>
filter(state %in% c("California", "New York", "North Carolina"))
nurses_subset |>
ggplot(aes(x = year, y = annual_salary_median, color = state)) +
geom_line() +
scale_y_continuous(labels = label_dollar(scale = 1/1000, suffix = "K")) +
labs(
x = "Year", y = "Annual median salary", color = "State",
title = "Annual median salary of Registered Nurses"
) +
coord_cartesian(clip = "off") +
theme(
plot.margin = margin(0.1, 0.9, 0.1, 0.1, "in")
)
ggplot(nurses_subset, aes(x = year, y = annual_salary_median, color = state)) +
geom_line() +
geom_text(data = subset(nurses_subset, year == max(year)),
aes(label = state),
hjust = -0.2, vjust = -0.2, size = 4) +
scale_y_continuous(labels = scales::dollar_format(scale = 1/1000, suffix = "K")) +
labs(
x = "Year", y = "Annual median salary",
title = "Annual median salary of Registered Nurses"
) +
coord_cartesian(clip = "off") +
theme(
plot.margin = margin(0.1, 0.9, 0.1, 0.1, "in"),
legend.position = "none"
)
remotes::install_github("wilkelab/cowplot")
install.packages("colorspace", repos = "http://R-Forge.R-project.org")
remotes::install_github("clauswilke/colorblindr")
library(colorblindr)
library(viridis)
library(cowplot)
# Base plot
base_plot <- ggplot(nurses_subset, aes(x = year, y = annual_salary_median, group = state, color = state)) +
geom_line() +
scale_y_continuous(labels = scales::label_dollar(scale = 1/1000, suffix = "K")) +
labs(x = "Year", y = "Annual median salary", title = "Annual median salary of Registered Nurses")
### Default Color Scale
```{r default-colors, fig.width=8, fig.height=5}
#remotes::install_github("wilkelab/cowplot")
#install.packages("colorspace", repos = "http://R-Forge.R-project.org")
#remotes::install_github("clauswilke/colorblindr")
library(colorblindr)
library(viridis)
library(cowplot)
# Base plot
base_plot <- ggplot(nurses_subset, aes(x = year, y = annual_salary_median, group = state, color = state)) +
geom_line() +
scale_y_continuous(labels = scales::label_dollar(scale = 1/1000, suffix = "K")) +
labs(x = "Year", y = "Annual median salary", title = "Annual median salary of Registered Nurses")
### Default Color Scale
```{r default-colors, fig.width=8, fig.height=5}
viridis_plot <- base_plot +
scale_color_viridis(discrete = TRUE) +
ggtitle("Viridis Color Scale") +
theme_minimal()
viridis_plot
cvd_grid(viridis_plot)
okabeito_plot <- base_plot +
scale_color_OkabeIto() +
ggtitle("Okabe-Ito Color Scale") +
theme_minimal()
okabeito_plot
cvd_grid(okabeito_plot)
#remotes::install_github("wilkelab/cowplot")
#install.packages("colorspace", repos = "http://R-Forge.R-project.org")
#remotes::install_github("clauswilke/colorblindr")
library(colorblindr)
library(viridis)
library(cowplot)
# Base plot
base_plot <- ggplot(nurses_subset, aes(x = year, y = annual_salary_median, group = state, color = state)) +
geom_line() +
scale_y_continuous(labels = scales::label_dollar(scale = 1/1000, suffix = "K")) +
labs(x = "Year", y = "Annual median salary", title = "Annual median salary of Registered Nurses")
### Default Color Scale
{r default-colors, fig.width=8, fig.height=5}
#remotes::install_github("wilkelab/cowplot")
#install.packages("colorspace", repos = "http://R-Forge.R-project.org")
#remotes::install_github("clauswilke/colorblindr")
library(colorblindr)
library(viridis)
library(cowplot)
# Base plot
base_plot <- ggplot(nurses_subset, aes(x = year, y = annual_salary_median, group = state, color = state)) +
geom_line() +
scale_y_continuous(labels = scales::label_dollar(scale = 1/1000, suffix = "K")) +
labs(x = "Year", y = "Annual median salary", title = "Annual median salary of Registered Nurses")
### Default Color Scale
```{r default-colors, fig.width=8, fig.height=5}
#remotes::install_github("wilkelab/cowplot")
#install.packages("colorspace", repos = "http://R-Forge.R-project.org")
#remotes::install_github("clauswilke/colorblindr")
library(colorblindr)
library(viridis)
library(cowplot)
# Base plot
base_plot <- ggplot(nurses_subset, aes(x = year, y = annual_salary_median, group = state, color = state)) +
geom_line() +
scale_y_continuous(labels = scales::label_dollar(scale = 1/1000, suffix = "K")) +
labs(x = "Year", y = "Annual median salary", title = "Annual median salary of Registered Nurses")
### Default Color Scale
default_plot <- base_plot +
ggtitle("Default ggplot2 Color Scale") +
theme_minimal()
default_plot
cvd_grid(default_plot)
nurses_subset |>
filter(year %in% c(2000, 2010, 2020)) |>
ggplot(aes(x = state, y = total_employed_rn, fill = factor(year))) +
geom_col(position = "dodge") +
scale_fill_viridis_d(option = "E") +
scale_y_continuous(labels = label_number(scale = 1/1000, suffix = "K")) +
labs(
x = "State", y = "Number of Registered Nurses", fill = "Year",
title = "Total employed Registered Nurses"
) +
theme(
legend.background = element_rect(fill = "white", color = "white"),
legend.position = c(0.85, 0.75)
)
ggplot(nurses_subset, aes(x = year, y = annual_salary_median, color = state)) +
geom_line() +
geom_text(data = subset(nurses_subset, year == max(year)),
aes(label = state),
hjust = -0.2, vjust = -0.2, size = 4) +
scale_y_continuous(labels = scales::dollar_format(scale = 1/1000, suffix = "K")) +
labs(
x = "Year", y = "Annual median salary", color = "State",
title = "Annual median salary of Registered Nurses"
) +
coord_cartesian(clip = "off") +
theme(
plot.margin = margin(0.1, 0.9, 0.1, 0.1, "in"),
legend.position = "none"
)
#remotes::install_github("wilkelab/cowplot")
#install.packages("colorspace", repos = "http://R-Forge.R-project.org")
#remotes::install_github("clauswilke/colorblindr")
library(colorblindr)
library(viridis)
library(cowplot)
# Create the basic plot
base_plot <- ggplot(nurses_subset, aes(x = year, y = annual_salary_median, group = state, color = state)) +
geom_line() +
scale_y_continuous(labels = scales::label_dollar(scale = 1/1000, suffix = "K")) +
labs(x = "Year", y = "Annual median salary", title = "Annual median salary of Registered Nurses")
# Default ggplot2 color scale
default_plot <- base_plot +
ggtitle("Default ggplot2 Color Scale") +
theme_minimal()
default_plot
# Simulate colorblindness
default_cvd <- cvd_grid(default_plot)
default_cvd
# Viridis color scale
viridis_plot <- base_plot +
scale_color_viridis(discrete = TRUE) +
ggtitle("Viridis Color Scale") +
theme_minimal()
viridis_plot
# Simulate colorblindness
viridis_cvd <- cvd_grid(viridis_plot)
viridis_cvd
# Okabe-Ito color scale from colorblindr
okabeito_plot <- base_plot +
scale_color_OkabeIto() +
ggtitle("Okabe-Ito Color Scale") +
theme_minimal()
okabeito_plot
# Simulate colorblindness
okabeito_cvd <- cvd_grid(okabeito_plot)
okabeito_cvd
library(tidyverse)
library(scales)
install.packages('WDI')
library(WDI)
install.packages('ggrepel')
library(ggrepel)
install.packages('ggtext')
library(ggtext)
indicators <- c("SP.POP.TOTL",     # Population
"EN.ATM.CO2E.PC",  # CO2 emissions
"NY.GDP.PCAP.KD")  # GDP per capita
# CO2 emissions data is mostly NULL from 2021 onwards...
wdi_co2_raw <- WDI(country = "all", indicators, extra = TRUE, start = 1995, end = 2023)
wdi_clean <- wdi_co2_raw |>
filter(region != "Aggregates") |>
select(iso2c, iso3c, country, year,
population = SP.POP.TOTL,
co2_emissions = EN.ATM.CO2E.PC,
gdp_per_cap = NY.GDP.PCAP.KD,
region, income
) |>
filter(population > 200000)
library(tidyverse)
library(scales)
install.packages('WDI')
library(WDI)
install.packages('ggrepel')
library(ggrepel)
install.packages('ggtext')
library(ggtext)
library(tidyverse)
library(scales)
#install.packages('WDI')
library(WDI)
#install.packages('ggrepel')
library(ggrepel)
#install.packages('ggtext')
library(ggtext)
indicators <- c("SP.POP.TOTL",     # Population
"EN.ATM.CO2E.PC",  # CO2 emissions
"NY.GDP.PCAP.KD")  # GDP per capita
# CO2 emissions data is mostly NULL from 2021 onwards...
wdi_co2_raw <- WDI(country = "all", indicators, extra = TRUE, start = 1995, end = 2023)
# Check the status code
if (status_code(response) == 200) {
# Parse the JSON content
json_data <- content(response, as = "text", encoding = "UTF-8")
parsed_data <- fromJSON(json_data)
print(parsed_data)
} else {
print(paste("Error:", status_code(response)))
}
library(httr)
library(jsonlite)
# Make a GET request to the local API
response <- GET("http://http://127.0.0.1:5000/user/saved_tracks?filename=m36i6tkbyxen3w6euott3ufhi_spotify.json&username=m36i6tkbyxen3w6euott3ufhi&limit=20")
library(httr)
library(jsonlite)
# Make a GET request to the local API
response <- GET("http://127.0.0.1:5000/user/saved_tracks?filename=m36i6tkbyxen3w6euott3ufhi_spotify.json&username=m36i6tkbyxen3w6euott3ufhi&limit=20")
# Check the status code
if (status_code(response) == 200) {
# Parse the JSON content
json_data <- content(response, as = "text", encoding = "UTF-8")
parsed_data <- fromJSON(json_data)
print(parsed_data)
} else {
print(paste("Error:", status_code(response)))
}
response.track.popularity
response[track.popularity]
response[track.popularity]
shiny::runApp('Desktop/datavis-project2')
runApp('Desktop/datavis-project2')
runApp('Desktop/datavis-project2')
runApp('Desktop/datavis-project2')
